name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key
        DEBUG: True

    - name: Run tests
      run: |
        cd backend
        python manage.py test tests/ --verbosity=2
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True

    - name: Run coverage
      run: |
        cd backend
        coverage run --source='.' manage.py test tests/
        coverage report
        coverage xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm install

    - name: Fix lightningcss binary for Tailwind CSS v4
      run: |
        cd frontend
        # Install lightningcss binary manually for Linux
        npm install lightningcss@latest
        # Download the correct binary for Linux
        curl -L https://github.com/parcel-bundler/lightningcss/releases/latest/download/lightningcss-linux-x64-gnu.tar.gz -o lightningcss.tar.gz
        tar -xzf lightningcss.tar.gz
        mkdir -p node_modules/lightningcss
        cp lightningcss node_modules/lightningcss/lightningcss.linux-x64-gnu.node
        rm lightningcss.tar.gz lightningcss

    - name: Run linting
      run: |
        cd frontend
        npm run lint

    - name: Run type checking
      run: |
        cd frontend
        npx tsc --noEmit

    - name: Run tests
      run: |
        cd frontend
        echo "No tests configured - skipping test step"

    - name: Build application
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000/api
        NEXT_PUBLIC_BACKEND_URL: http://localhost:8000

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run Bandit security scan
      run: |
        cd backend
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        cd backend
        pip install safety
        safety check --json --output safety-report.json || true

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and test Docker images
      run: |
        # Build backend image
        docker build -t blog-backend ./backend

        # Build frontend image
        docker build -t blog-frontend ./frontend

        # Test Docker Compose
        docker-compose up -d
        sleep 30
        docker-compose down

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, docker-build]
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: docker-compose -f docker-compose.prod.yml up -d
